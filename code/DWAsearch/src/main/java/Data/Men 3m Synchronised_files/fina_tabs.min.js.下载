"use strict";

(function (app, common, core) {
  'use strict';

  const {
    CLASSES
  } = common.CONSTANTS;
  const DROPDOWN_BUTTON = 'js-dropdown-btn';
  const DROPDOWN = 'js-dropdown';

  /**
   * Tabs Widget
   *
   */
  app.TabsWidget = class TabsWidget {
    /**
     * Constructor
     *
     * @param { HTMLElement } container - container Element that widget is instantiated on
     */
    constructor(container) {
      this.container = container;
      this.tabsList = this.container.querySelector('.js-dynamic-list');
      this.mobileDropdownHolder = this.container.querySelector('.js-mobile-dropdown-holder');
      this.tabsList.addEventListener('click', this.delegateEvent.bind(this));
      common.closeOnOutsideClick.addElement(this.container, this.closeAllDropdowns.bind(this), this.container);
      const dynamicNav = this.container.querySelector('.js-dynamic-nav');
      new app.DynamicMore(dynamicNav);
      common.dependency.loaded('HorizontalNav').then(() => {
        new app.HorizontalNav(dynamicNav);
      });
    }

    /**
     * Delegate Event
     *
     * Checks the element clicked has the right class, then closes all
     * dropdowns, excluding the one clicked, and toggles the one that was
     * clicked.
     *
     * @param {Event} event - The click event
     */
    delegateEvent(event) {
      if (!core.style.hasClass(event.target, DROPDOWN_BUTTON)) {
        return;
      }
      this.closeAllDropdowns(event.target);
      this.toggleDropdown(event.target);
    }

    /**
     * Toggle Dropdown
     *
     * Either opens or closes the passed dropdown button by adding classes
     * and flipping aria-attributes on it's dropdown sibling.
     *
     * @param {HTMLElement} dropdownButton - The dropdown button to be toggled
     */
    toggleDropdown(dropdownButton) {
      core.style.toggleClass(dropdownButton, CLASSES.IS_OPEN);
      const dropdown = dropdownButton.parentElement.querySelector(`.${DROPDOWN}`);
      dropdown.getAttribute('aria-expanded') === 'true' ? dropdown.setAttribute('aria-expanded', false) : dropdown.setAttribute('aria-expanded', true);
      dropdown.getAttribute('aria-hidden') === 'true' ? dropdown.setAttribute('aria-hidden', false) : dropdown.setAttribute('aria-hidden', true);

      // If opening
      if (core.style.hasClass(dropdownButton, CLASSES.IS_OPEN)) {
        this.mobileDropdownHolder.innerHTML = dropdown.parentElement.outerHTML;
      } else {
        this.mobileDropdownHolder.innerHTML = '';
      }
    }

    /**
     * Close All Dropdowns
     *
     * Close all open dropdowns. Can be passed an element to exclude from
     * being closed
     *
     * @param {HTMLElement} excludedDropdown - The element to *not* close.
     */
    closeAllDropdowns(excludedDropdown) {
      const openButtons = this.container.querySelectorAll(`.${DROPDOWN_BUTTON}.${CLASSES.IS_OPEN}`);
      for (let i = 0; i < openButtons.length; i++) {
        const dropdownButton = openButtons[i];
        if (!core.style.hasClass(dropdownButton, CLASSES.IS_OPEN) || dropdownButton === excludedDropdown) {
          continue;
        }
        core.style.removeClass(dropdownButton, CLASSES.IS_OPEN);
        const dropdown = dropdownButton.parentElement.querySelector(`.${DROPDOWN}`);
        dropdown.setAttribute('aria-expanded', false);
        dropdown.setAttribute('aria-hidden', true);
      }
      this.mobileDropdownHolder.innerHTML = '';
    }
  };
  app.widgetInitialiser.addMultipleWidgetsByName('tabs');
})(PULSE.app, PULSE.app.common, PULSE.core);