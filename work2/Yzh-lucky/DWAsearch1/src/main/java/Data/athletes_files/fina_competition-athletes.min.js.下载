"use strict";

PULSE.app.templates['competition-athletes.athletes-table-row'] = _.template("<% if ( data.PreferredFirstName || data.PreferredLastName ) { %> <tr class=\"athlete-table__row <%= data.link ? 'athlete-table__row--link' : '' %> link-underline-trigger\" <%= data.link ? 'data-link=\"' + data.link + '\"' : '' %>> <td class=\"athlete-table__cell u-text-center\"> <div class=\"athlete-table__country\"> <div class=\"athlete-table__disc-markers\"> <% _.each( data.athleteDisciplines, function( discipline ) { %> <span class=\"athlete-table__disc-marker t-<%= discipline %>\"></span> <% } ); %> </div> <%= render( { cssClass: 'athlete-table__flag', countryCode: data.countryCode }, 'common.flag' ) %> <%= data.countryCode %> </div> </td> <td class=\"athlete-table__cell athlete-table__cell--name\"> <div class=\"athlete-table__person\"> <div class=\"athlete-table__person-image\"> <%= render( {\n                        cssClass: 'athlete-table__photo',\n                        id: data.ResultId,\n                        size: 'TABLE',\n                        objectFit: true\n                    }, 'common.athlete-headshot' ) %> </div> <div class=\"athlete-table__name\"> <span class=\"athlete-table__person-fname\"> <%= data.PreferredFirstName %> </span> <strong><%= data.PreferredLastName %></strong> </div> </div> </td> <td class=\"athlete-table__cell u-hide-tablet u-text-center\"> <%= PULSE.I18N.lookup( 'label.athlete.gender.' + data.Gender ) %> </td> <td class=\"athlete-table__cell u-hide-tablet u-text-center\"> <%= data.DOB ? dayjs( data.DOB ).format( 'DD/MM/YYYY' ) : '-' %> </td> <td class=\"athlete-table__cell u-hide-tablet\"> <% _.each( data.athleteDisciplines, function( discipline ) { %> <div class=\"athlete-table__discipline t-<%= discipline %>\"> <%= render( {\n                        cssClass: 'athlete-table__discipline-icon',\n                        name: discipline\n                    }, 'common.render-svg' ) %> <%= PULSE.I18N.lookup( 'label.discipline.' + discipline ) %> </div> <% } ); %> </td> <td class=\"athlete-table__cell\"> <% if ( data.link ) { %> <div class=\"athlete-table__cta\"> <a class=\"athlete-table__cta-link\" href=\"<%= data.link %>\" <%= helper.template.seoTitle( data.PreferredFirstName + ' ' + data.PreferredLastName ) %>> <span class=\"link-underline link-underline--slow u-hide-desktop\"><%= PULSE.I18N.lookup( 'label.view.profile' ) %></span> <%= render( {\n                            cssClass: 'athlete-table__cta-arrow',\n                            name: 'arrow-forward'\n                        }, 'common.render-svg' ) %> </a> </div> <% } %> </td> </tr> <% } %>");
PULSE.app.templates['competition-athletes.athletes-table'] = _.template("<table class=\"athlete-table__table\"> <thead> <tr class=\"athlete-table__header-row\"> <th scope=\"col\" class=\"athlete-table__header-cell athlete-table__header-cell--country u-text-center\"> <%= PULSE.I18N.lookup( 'label.table.header.country' ) %> </th> <th scope=\"col\" class=\"athlete-table__header-cell athlete-table__header-cell--name\"> <%= PULSE.I18N.lookup( 'label.table.header.athlete' ) %> </th> <th scope=\"col\" class=\"athlete-table__header-cell athlete-table__header-cell--gender u-hide-tablet u-text-center\"> <%= PULSE.I18N.lookup( 'label.table.header.gender' ) %> </th> <th scope=\"col\" class=\"athlete-table__header-cell athlete-table__header-cell--dob u-hide-tablet u-text-center\"> <%= PULSE.I18N.lookup( 'label.table.header.dob' ) %> </th> <th scope=\"col\" class=\"athlete-table__header-cell u-hide-tablet\"> <%= PULSE.I18N.lookup( 'label.table.header.discipline' ) %> </th> <th scope=\"col\" class=\"athlete-table__header-cell athlete-table__header-cell--cta\"></th> </tr> </thead> <tbody class=\"js-athletes-table-body\"> <% _.each( athletes, function( athlete ) { %> <%= render( { data: athlete }, 'competition-athletes.athletes-table-row' ) %> <% } ); %> </tbody> </table> ");
"use strict";

(function (app, common, core) {
  'use strict';

  const {
    CLASSES
  } = common.CONSTANTS;
  const SELECTORS = {
    EMPTY_STATE: '.js-empty-state',
    LOADER: '.js-loader',
    ATHLETES_CONTAINER: '.js-athletes-container',
    ATHLETES_TABLE_BODY: '.js-athletes-table-body',
    SHOW_MORE: '.js-show-more-button'
  };
  const TEMPLATES = {
    TABLE: 'competition-athletes.athletes-table',
    ROW: 'competition-athletes.athletes-table-row'
  };
  const PAGE_SIZE = 50;
  const SCROLL_LOAD_COUNT = 2;

  /**
   * Competition Athletes Widget
   *
   * @param { HTMLElement } container - container Element that widget is instantiated on
   */
  app.CompetitionAthletesWidget = class CompetitionAthletesWidget {
    constructor(container) {
      this.container = container;
      this.compId = this.container.getAttribute('data-comp-id');
      this.athletesContainerEle = this.container.querySelector(SELECTORS.ATHLETES_CONTAINER);
      this.emptyStateEle = this.container.querySelector(SELECTORS.EMPTY_STATE);
      this.loaderEle = this.container.querySelector(SELECTORS.LOADER);
      this.showMoreEle = this.container.querySelector(SELECTORS.SHOW_MORE);
      this.page = 1;
      common.dependency.loaded('redux').then(this.setupWatches.bind(this));
      common.dependency.loaded('InfiniteScrollWidget').then(this.setupLoadMore.bind(this));
      this.setupClickListeners();
    }

    /**
     * Setup Watches
     *
     * Once redux is loaded, start watching for filter changes to trigger a
     * load of the rankings table.
     */
    setupWatches() {
      const {
        watch,
        slices
      } = PULSE.app.redux;
      watch(slices.filters.paths.values.all, filterValues => {
        if (!_.isEmpty(filterValues)) {
          if (this.infiniteScroll) {
            this.infiniteScroll.stop();
          }
          this.page = 1;
          this.loadCounter = 0;
          this.countryFilter = filterValues.countryId;
          this.showLoader();
          const url = common.endpoints.fina.competitions.athletes(this.compId, filterValues);
          core.data.request(url, 'GET', this.renderAthletesTable.bind(this), [app.account]);
        }
      }, true);
    }

    /**
     * Render Athletes Table
     *
     * Callback function for when the athletes api returns a response. Check
     * the data object then render away.
     *
     * @param {*} data - The response from the rankings API
     */
    renderAthletesTable(data) {
      // If not data, or problem, show error and return
      if (!data || !data.length) {
        console.warn('[Competition Athletes] There was an error fetching rankings.');
        this.showEmpty();
        return;
      }

      // Update the options filter with all available countries
      if (!this.countryFilter) {
        const allCountries = data.map(country => country.CountryCode);
        const {
          slices,
          store
        } = PULSE.app.redux;
        store.dispatch(slices.filters.actions.updateOptionsFilter({
          key: 'countryId',
          list: allCountries
        }));
      }

      // Paginate athletes and decide to display show more or not
      this.pagedAthletesData = _paginateAthletes(data);
      if (this.pagedAthletesData.length > 1) {
        core.style.removeClass(this.showMoreEle.parentElement, CLASSES.U_HIDE);
        core.style.removeClass(this.showMoreEle, CLASSES.U_HIDE);
      }

      // Render template into DOM
      this.athletesContainerEle.innerHTML = app.templating.render({
        athletes: this.pagedAthletesData[0]
      }, TEMPLATES.TABLE);

      // Query this now to inject other rows later
      this.athletesTableBody = this.container.querySelector(SELECTORS.ATHLETES_TABLE_BODY);

      // Hide the loader/error and show the table
      this.showContent();

      // Kick off and load the athlete headshots
      app.widgetInitialiser.addMultipleWidgetsByName('athlete-headshot');
    }

    /**
     * Setup Load More
     *
     * Create a load more instance and add a click listener to the show more
     * button
     */
    setupLoadMore() {
      const AthletesScroll = function (container, render) {
        app.InfiniteScrollWidget.call(this, container, render);
      };
      AthletesScroll.prototype = Object.create(app.InfiniteScrollWidget.prototype);
      AthletesScroll.prototype.makeRequest = this.showMore.bind(this);
      AthletesScroll.prototype.constructor = AthletesScroll;
      common.addAriaClickListener(this.showMoreEle, () => {
        if (!this.infiniteScroll) {
          this.infiniteScroll = new AthletesScroll(this.container, this.render);
        } else {
          this.infiniteScroll.start();
        }
      });
    }

    /**
     * Show More
     *
     * When the show more button is clicked, up the page number then loop
     * through the rankings for the page, compile them into a html string
     * and inject them into the page.
     */
    showMore() {
      this.page++;
      const pageIndex = this.page - 1;
      if (Array.isArray(this.pagedAthletesData[pageIndex]) && this.pagedAthletesData[pageIndex].length) {
        let html = '';
        for (let i = 0; i < this.pagedAthletesData[this.page - 1].length; i++) {
          const athlete = this.pagedAthletesData[this.page - 1][i];
          html += app.templating.render({
            data: athlete
          }, TEMPLATES.ROW);
        }

        // Render template into DOM
        this.athletesTableBody.insertAdjacentHTML('beforeend', html);

        // Kick off and load the athlete headshots
        app.widgetInitialiser.addMultipleWidgetsByName('athlete-headshot');
        if (this.loadCounter >= SCROLL_LOAD_COUNT) {
          this.infiniteScroll.pause();
          // core.style.removeClass( this.showMoreEle, CLASSES.U_HIDE );
          this.loadCounter = 0;
        } else {
          this.loadCounter++;
        }
      } else {
        this.infiniteScroll.stop();
      }
    }

    /**
     * Show Loader
     *
     * Shows the loader, hides the rest.
     */
    showLoader() {
      core.style.addClass(this.athletesContainerEle, CLASSES.U_HIDE);
      core.style.addClass(this.emptyStateEle, CLASSES.U_HIDE);
      core.style.addClass(this.showMoreEle, CLASSES.U_HIDE);
      core.style.removeClass(this.loaderEle, CLASSES.U_HIDE);
    }

    /**
     * Show Content
     *
     * Shows the content, hides the rest.
     */
    showContent() {
      core.style.addClass(this.emptyStateEle, CLASSES.U_HIDE);
      core.style.addClass(this.loaderEle, CLASSES.U_HIDE);
      core.style.removeClass(this.athletesContainerEle, CLASSES.U_HIDE);
    }

    /**
     * Show Empty
     *
     * Shows the empty/error message, hides the rest.
     */
    showEmpty() {
      core.style.addClass(this.showMoreEle, CLASSES.U_HIDE);
      core.style.addClass(this.loaderEle, CLASSES.U_HIDE);
      core.style.addClass(this.athletesContainerEle, CLASSES.U_HIDE);
      core.style.removeClass(this.emptyStateEle, CLASSES.U_HIDE);
    }

    /**
     * Setup Click Listeners
     *
     * Create click listeners the rows in the table
     */
    setupClickListeners() {
      this.athletesContainerEle.addEventListener('click', event => {
        const targetRow = common.dom.closest(event.target, '[data-link]');
        if (targetRow) {
          const link = targetRow.getAttribute('data-link');
          if (link) {
            window.location = link;
          }
        }
      }, false);
    }
  };

  /**
   * Paginate Athletes
   *
   * Take the response from the competition athletes api and create an array
   * with each item being a "page" of entries.
   *
   * @param {Object} data - Response from competition athletes api
   * @returns {Array} - The array of "pages"
   */
  const _paginateAthletes = data => {
    const pages = [];
    const allAthletes = data.reduce((athletes, country) => {
      const countryCode = country.CountryCode;

      // Model the various parts of an athlete as required
      const countryAthletes = country.Participations.map(athlete => ({
        ...athlete,
        countryCode,
        athleteDisciplines: athlete.Sports.replace(' ', '').split(',').map(disc => common.fina.getDiscipline(disc).name),
        link: common.url.generateAthleteUrl(athlete.ResultId, `${athlete.PreferredFirstName} ${athlete.PreferredLastName}`, countryCode)
      }));
      athletes.push(...countryAthletes);
      return athletes;
    }, []);
    let index = 0;
    while (index < allAthletes.length) {
      pages.push(allAthletes.slice(index, index + PAGE_SIZE));
      index += PAGE_SIZE;
    }
    return pages;
  };
  app.widgetInitialiser.addMultipleWidgetsByName('competition-athletes');
})(PULSE.app, PULSE.app.common, PULSE.core);