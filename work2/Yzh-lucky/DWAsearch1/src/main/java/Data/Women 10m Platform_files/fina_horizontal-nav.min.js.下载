"use strict";

(function (app, CONSTANTS, core) {
  'use strict';

  const {
    CLASSES
  } = CONSTANTS;

  /**
   * Horizontal Nav
   *
   * Scrolls the active item into view. To be used with any overflow scroll
   * horizontal navigation
   *
   * @param { HTMLElement } container - the element this widget was instantiated on
   */
  app.HorizontalNav = function (container) {
    this.container = container;
    const activeItem = container.querySelector(`.${CLASSES.IS_ACTIVE}`);
    const overflowedElement = container.querySelector('.js-horizontal-scroll') || container;
    if (activeItem && overflowedElement) {
      if (overflowedElement.offsetWidth < activeItem.offsetLeft + activeItem.offsetWidth) {
        // maths to scroll the overflowed element to have the active element in the centre
        overflowedElement.scrollLeft = activeItem.offsetLeft - (overflowedElement.offsetWidth / 2 - activeItem.offsetWidth / 2);
      }
    }
    if (overflowedElement) {
      overflowedElement.addEventListener('scroll', _handleScroll.bind(this));
    }

    // Run it once to render any relevant gradients for the starting position
    _handleScroll.call(this, {
      target: overflowedElement
    });
  };

  /**
   * Handle Scroll
   *
   * Callback function for when a horizontal scroll nav element is scrolled.
   * Does some calculations with scrollLeft to figure out if the element is
   * scrolled all the way to the left/right and adds status classes so the
   * relevant gradients can be shown.
   *
   * @param { Event } event - Scroll event
   */
  const _handleScroll = function _handleScroll(event) {
    const scrollingElement = event.target;
    if (scrollingElement.scrollLeft > 0) {
      core.style.addClass(this.container, CLASSES.IS_SCROLLING_LEFT);
    } else {
      core.style.removeClass(this.container, CLASSES.IS_SCROLLING_LEFT);
    }
    if (scrollingElement.scrollLeft !== scrollingElement.scrollWidth - scrollingElement.offsetWidth) {
      core.style.addClass(this.container, CLASSES.IS_SCROLLING_RIGHT);
    } else {
      core.style.removeClass(this.container, CLASSES.IS_SCROLLING_RIGHT);
    }
  };

  // Fire an event so the loading of this can be confirmed via a Promise
  document.dispatchEvent(new Event(CONSTANTS.EVENTS.HORIZONTALNAV.READY));
  app.widgetInitialiser.addMultipleWidgetsByName('horizontal-nav', app.HorizontalNav);
})(PULSE.app, PULSE.app.common.CONSTANTS, PULSE.core);