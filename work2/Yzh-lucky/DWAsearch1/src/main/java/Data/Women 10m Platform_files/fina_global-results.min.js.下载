"use strict";

PULSE.app.templates['global-results.artistic-swimming'] = _.template("<% if ( result.TotalPoints !== undefined ) { %> <% if ( result.Competitors !== undefined && result.Competitors.length ) { %> <div class=\"discipline-card__participants\"> <% result.Competitors.forEach( competitor=> { %> <div class=\"discipline-card__participant\"> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag-sml' , countryCode: competitor.Nationality\n                                }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-image-container discipline-card__athlete-image-container--hide-mobile\"> <%= render( { cssClass: 'athlete-headshot--grs-sml' , id: competitor.ResultId, size: 'TABLE' , objectFit: true\n                            }, 'common.athlete-headshot' ) %> </div> <div class=\"discipline-card__athlete-name\"> <span class=\"discipline-card__athlete-first\"> <%= competitor.FirstName %> </span> <span class=\"discipline-card__athlete-last\"> <%= competitor.LastName %> </span> </div> </div> <% } ) %> </div> <% } else { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag-large' , countryCode: result.Nationality }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-country-name\"> <%= result.Nationality %> </div> <% } %> <div class=\"discipline-card__points-time\"> <span class=\"discipline-card__points-time-label\"><%= PULSE.I18N.lookup( 'label.points' ) %></span> <%= result.TotalPoints %> </div> <% } else { %> <%= render( { ...schedule }, 'global-results.start-time' ) %> <% } %> ");
PULSE.app.templates['global-results.competition-header'] = _.template("<h2 class=\"grs__title\"><%= name %></h2> <span class=\"grs__header-date\"> <% if ( dataString ) { %> <span> <%= dataString %> </span> <% } else { %> <div class=\"js-comp-dates <%= dataString ? 'u-hide' : '' %>\" data-long-date=\"true\"> <span class=\"js-date-from\" data-date=\"<%= venueDateFrom %>\"></span> <span class=\"js-date-to\" data-date=\"<%= venueDateTo %>\"></span> </div> <% } %> </span>");
PULSE.app.templates['global-results.discipline-card'] = _.template("<div class=\"grs__item js-event\" data-status=\"<%= data.schedule.resultStatus %>\"> <div class=\"discipline-card discipline-card--<%= data.schedule.resultStatus.toLowerCase() %> discipline-card--<%= data.schedule.sportCode.toLowerCase() %>\"> <a href=\"<%= data.schedule.url %>\" class=\"discipline-card__item-link\" <%= helper.template.seoTitle( data.schedule.title ) %>> <div class=\"discipline-card__top <%= data.schedule.resultStatus.toLowerCase() %>\"> <%= render( { discipline: data.schedule.discipline, cssClass: 'discipline-card__item-disc-wrap' }, 'common.discipline-icon' ) %> <div class=\"discipline-card__title-phase\"> <h3 class=\"discipline-card__discipline-title\"> <%= data.schedule.disciplineName %> </h3> <span class=\"discipline-card__phase\"> <%= data.schedule.phaseName %> </span> </div> <% if ( data.schedule.resultStatus ) { %> <%= render( { status: data.schedule.resultStatus, cssClass: 'discipline-card__unit-status'\n                        }, 'results-table.status-tag' ) %> <% } %> </div> <div class=\"discipline-card__main\"> <div class=\"discipline-card__heat\"> <%= render( data, data.schedule.template ) %> </div> <div class=\"discipline-card__footer\"> <div class=\"discipline-card__comp-name <%= singleComp ? 'discipline-card__comp-name--single-comp' : '' %>\"> <% if ( singleComp ) { %> <% if ( data.schedule.location ) { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag' , countryCode: data.schedule.location.countryCode }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__comp-country-name\"> <%= data.schedule.location.countryCode %>, <%= data.schedule.location.city %> </div> <% } %> <% } else { %> <%= data.schedule.compName %> <% } %> </div> <time class=\"discipline-card__result-date\"> <%= dayjs.utc( data.schedule.utcDateTime ).local().format( data.schedule.resultDateFormat ) %> </time> </div> </div> </a> </div> </div>");
PULSE.app.templates['global-results.diving'] = _.template("<% if ( result.TotalPoints !== undefined ) { %> <% if ( result.FirstName !== undefined && result.LastName !== undefined ) { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag', countryCode: result.Nationality }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-image-container discipline-card__athlete-image-container--hide-mobile\"> <%= render( { cssClass: 'athlete-headshot--grs' , id: result.ResultId, size: 'TABLE' , objectFit: true }, 'common.athlete-headshot' ) %> </div> <div class=\"discipline-card__athlete-name\"> <span class=\"discipline-card__athlete-first\"> <%= result.FirstName %> </span> <span class=\"discipline-card__athlete-last\"> <%= result.LastName %> </span> </div> <% } else if ( result.Competitors !== undefined && result.Competitors.length ) { %> <div class=\"discipline-card__participants\"> <% result.Competitors.forEach( competitor => { %> <div class=\"discipline-card__participant\"> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag-sml' , countryCode: competitor.Nationality\n                                }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-image-container discipline-card__athlete-image-container--hide-mobile\"> <%= render( { cssClass: 'athlete-headshot--grs-sml' , id: competitor.ResultId, size: 'TABLE' , objectFit: true\n                            }, 'common.athlete-headshot' ) %> </div> <div class=\"discipline-card__athlete-name\"> <span class=\"discipline-card__athlete-first\"> <%= competitor.FirstName %> </span> <span class=\"discipline-card__athlete-last\"> <%= competitor.LastName %> </span> </div> </div> <% } ) %> </div> <% } else { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag-large' , countryCode: result.Nationality }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-country-name\"> <%= result.Nationality %> </div> <% } %> <div class=\"discipline-card__points-time\"> <span class=\"discipline-card__points-time-label\"><%= PULSE.I18N.lookup( 'label.points' ) %></span> <%= result.TotalPoints %> </div> <% } else { %> <%= render( { ...schedule }, 'global-results.start-time' ) %> <% } %> ");
PULSE.app.templates['global-results.start-time'] = _.template("<time class=\"discipline-card__start-time\"> <%= dayjs.utc( utcDateTime ).local().format( 'HH:mm' ) %> <span class=\"discipline-card__start-time-label\"> <%= PULSE.I18N.lookup( 'label.yourTime' ) %> </span> </time> <span class=\"discipline-card__link-txt\"> <%= PULSE.I18N.lookup( 'label.disciplineLinkTxt.' + resultStatus.toLowerCase() ) %> <%= render( { name: 'arrow-forward' }, 'common.render-svg' ) %> </span>");
PULSE.app.templates['global-results.swimming'] = _.template("<% if ( schedule.resultStatus === 'OFFICIAL' && result !== undefined ) { %> <% if ( result.FirstName !== undefined && result.LastName !== undefined ) { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag', countryCode: result.Nationality }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-image-container discipline-card__athlete-image-container--hide-mobile\"> <%= render( { cssClass: 'athlete-headshot--grs' , id: result.ResultId, size: 'TABLE' , objectFit: true\n                }, 'common.athlete-headshot' ) %> </div> <div class=\"discipline-card__athlete-name\"> <span class=\"discipline-card__athlete-first\"> <%= result.FirstName %> </span> <span class=\"discipline-card__athlete-last\"> <%= result.LastName %> </span> </div> <% } else { %> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag-large', countryCode: result.Nationality }, 'common.flag' ) %> </div> </span> <div class=\"discipline-card__athlete-country-name\"> <%= result.Nationality %> </div> <% } %> <div class=\"discipline-card__points-time\"> <span class=\"discipline-card__points-time-label\"><%= PULSE.I18N.lookup( 'label.time' ) %></span> <%= result.Time %> </div> <% } else { %> <%= render( { ...schedule }, 'global-results.start-time' ) %> <% } %> ");
PULSE.app.templates['global-results.water-polo'] = _.template("<div class=\"discipline-card__participant\"> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag' , countryCode: schedule.teamHomeCode }, 'common.flag' ) %> </div> </span> <span class=\"discipline-card__country-name <%= result.FinalScoreHome !== undefined && result.FinalScoreAway !== undefined && parseInt( result.FinalScoreHome ) > parseInt( result.FinalScoreAway ) ? 'black' : '' %>\"> <%= schedule.teamHomeName %> </span> <span class=\"discipline-card__score <%= result.FinalScoreHome !== undefined && result.FinalScoreAway !== undefined && parseInt( result.FinalScoreHome ) > parseInt( result.FinalScoreAway ) ? 'black' : '' %>\"> <%= result.FinalScoreHome !== undefined ? result.FinalScoreHome : '-' %> </span> </div> <div class=\"discipline-card__participant\"> <span class=\"discipline-card__athlete-country\"> <div class=\"discipline-card__country\"> <%= render( { cssClass: 'discipline-card__country-flag' , countryCode: schedule.teamAwayCode }, 'common.flag' ) %> </div> </span> <span class=\"discipline-card__country-name <%= result.FinalScoreHome !== undefined && result.FinalScoreAway !== undefined && parseInt( result.FinalScoreAway ) > parseInt( result.FinalScoreHome ) ? 'black' : '' %>\"> <%= schedule.teamAwayName %> </span> <span class=\"discipline-card__score <%= result.FinalScoreHome !== undefined && result.FinalScoreAway !== undefined && parseInt( result.FinalScoreAway ) > parseInt( result.FinalScoreHome ) ? 'black' : '' %>\"> <%= result.FinalScoreAway !== undefined ? result.FinalScoreAway : '-' %> </span> </div> ");
"use strict";

(function (app, common, core, CONSTANTS, i18n) {
  'use strict';

  const MOBILE_HEADER_HEIGHT = '87';
  const TEMPLATES = {
    HEADER: 'global-results.competition-header',
    DISCIPLINE_CARD: 'global-results.discipline-card',
    // these codes match the SportCode in the data, so no need to re-map them
    /* eslint-disable id-length */
    SW: 'global-results.swimming',
    SW_RELAY: 'global-results.discipline-sw-relay',
    SY: 'global-results.artistic-swimming',
    DV: 'global-results.diving',
    OW: 'global-results.swimming',
    HD: 'global-results.diving',
    WP: 'global-results.water-polo'
  };

  /**
   * Global Results Strip Widget
   * @param { HTMLElement } container - container Element that widget is instantiated on
   */
  app.GlobalResultsStrip = class GlobalResultsStrip {
    constructor(container) {
      this.container = container;
      this.slideContainer = this.container.querySelector('.js-events-container');
      this.grsHeader = this.container.querySelector('.js-grs-header');
      this.scheduleDateFrom = parseInt(this.container.dataset.scheduleDateFrom);
      this.scheduleDateTo = parseInt(this.container.dataset.scheduleDateTo);
      this.competitionDate = this.container.dataset.competitionDate || '';
      this.comps = [];
      this.fetchEvents();
    }

    /**
     * Fetch Events
     *
     * Trigger an api request to the events endpoint
     */
    fetchEvents() {
      const params = {
        venueDateFrom: `${dayjs().subtract(this.scheduleDateFrom, 'day').format('YYYY-MM-DD')}T00:00:00Z`,
        venueDateTo: `${dayjs().add(this.scheduleDateTo, 'day').format('YYYY-MM-DD')}T23:59:00Z`
      };
      const url = common.endpoints.fina.results(params);
      core.data.request(url, 'GET', this.renderEvents.bind(this));
    }

    /**
     * Render Results
     * Using data from the results endpoint
     * render a list of individual events separated by disicpline
     *
     * @param {Object} content - data response from results events endpoint
     */
    renderEvents(_ref) {
      let {
        content
      } = _ref;
      const currentDate = dayjs().format('YYYY-MM-DD');
      const scheduleDateFrom = dayjs().subtract(parseInt(this.container.dataset.scheduleDateFrom, 10), 'day').format('YYYY-MM-DD');
      const scheduleDateTo = dayjs().add(parseInt(this.container.dataset.scheduleDateTo, 10), 'day').format('YYYY-MM-DD');
      const eventCards = [];
      const _resultStatus = resultStatus => resultStatus === 'START_LIST' ? 'UPCOMING' : resultStatus;
      content.forEach(data => {
        const compId = data.id;
        const compName = data.officialName;
        this.venueDateFrom = data.venueDateFrom;
        this.venueDateTo = data.venueDateTo;
        data.schedule.forEach(schedule => {
          const utcDateTime = dayjs(schedule.utcDateTime).format('YYYY-MM-DD');
          const isBetween = dayjs(schedule.utcDateTime).isBetween(scheduleDateFrom, scheduleDateTo);
          if (currentDate === utcDateTime || isBetween) {
            this.comps.push(compId);

            // Build out a params object to generate a results URL that will point to the correct event and phase/match
            const resultsParams = {
              event: schedule.disciplineId,
              unit: common.url.urlify(schedule.sportCode === 'WP' ? schedule.phaseName : schedule.name)
            };
            const model = {
              location: data.location,
              ...schedule,
              compName,
              discipline: common.fina.getDiscipline(schedule.sportCode).name,
              timezone: dayjs.tz.guess(),
              resultDateFormat: schedule.resultStatus === 'OFFICIAL' || schedule.sportCode === 'WP' ? 'ddd MMM DD HH:mm' : 'ddd MMM DD',
              template: TEMPLATES[schedule.sportCode],
              url: common.url.generateResultsUrl(compId, compName, resultsParams),
              title: schedule.disciplineName,
              resultStatus: _resultStatus(schedule.resultStatus)
            };
            if (schedule.sportCode === 'WP') {
              model.title = i18n.lookup('label.waterpolo.matchTitle', {
                home: schedule.teamHomeName,
                away: schedule.teamAwayName
              });
              model.FinalScoreHome = null;
              model.FinalScoreAway = null;
            }
            if (schedule.events) {
              // if we have results
              const scheduleEvents = this.modelEvent(schedule.events, schedule.name);
              scheduleEvents.heats.forEach(_ref2 => {
                let {
                  Results,
                  ...heat
                } = _ref2;
                const heatUtcDateTime = dayjs(heat.UtcDateTime).format('YYYY-MM-DD');
                // const heatUtcDateTimeBefore = dayjs().subtract( 2, 'day' ).format( 'YYYY-MM-DD' );

                if ((isBetween || heatUtcDateTime === currentDate) && (heat.Name === model.name || heat.PhaseName === model.phaseName)) {
                  // if we're dealing with WP we need to make sure that the teams in the schedule match the teams in the results array
                  const addCard = schedule.sportCode === 'WP' ? Results.TeamHomeName === schedule.teamHomeName && Results.TeamAwayName === schedule.teamAwayName : true;
                  if (addCard) {
                    resultsParams.unit = common.url.urlify(heat.SportCode === 'WP' ? model.phaseName : heat.Name);
                    eventCards.push({
                      schedule: {
                        ...model,
                        resultStatus: _resultStatus(heat.ResultStatus),
                        sportCode: heat.SportCode,
                        phaseName: heat.SportCode === 'WP' ? model.phaseName : heat.Name,
                        utcDateTime: heat.SportCode === 'WP' ? heat.UtcDateTime : heat.EndUtcDateTime,
                        url: common.url.generateResultsUrl(compId, compName, resultsParams)
                      },
                      heat,
                      result: Results
                    });
                  }
                }
              });
            } else {
              // otherwise just upcoming & live
              eventCards.push({
                schedule: model,
                heat: {},
                result: {}
              });
            }
          }
        });
      });
      if (eventCards.length) {
        this.container.classList.add(CONSTANTS.CLASSES.IS_ACTIVE);
        const uniqueComps = [...new Set(this.comps)];
        let compPosition = 0;
        if (uniqueComps.length === 1) {
          compPosition = content.findIndex(comp => comp.id === uniqueComps[0]);
        }
        const series = content[compPosition].series[0];
        if (uniqueComps.length === 1 && series) {
          const headerModel = {
            name: i18n.lookup('label.liveCompetitions'),
            dataString: this.competitionDate || '',
            venueDateFrom: this.venueDateFrom,
            venueDateTo: this.venueDateTo
          };
          this.grsHeader.innerHTML = app.templating.render(headerModel, TEMPLATES.HEADER);
          new app.FormatCompDates(this.grsHeader);
        }
        const sortedEvents = eventCards.sort((a, b) => dayjs(a.schedule.utcDateTime).isAfter(b.schedule.utcDateTime) ? 1 : -1);
        const liveIndex = sortedEvents.findIndex(event => event.schedule.resultStatus === 'LIVE');

        // make sure the live event is positioned after offical & before upcoming events
        if (liveIndex >= 0) {
          const upcomingIndex = sortedEvents.findIndex(event => event.schedule.resultStatus === 'UPCOMING');
          const liveEvent = sortedEvents.splice(liveIndex, 1)[0];
          sortedEvents.splice(upcomingIndex - 1, 0, liveEvent);
        }
        sortedEvents.forEach(event => {
          this.slideContainer.insertAdjacentHTML('beforeend', app.templating.render({
            data: event,
            singleComp: uniqueComps.length === 1
          }, TEMPLATES.DISCIPLINE_CARD));
        });

        // Kick off and load the athlete headshots
        app.widgetInitialiser.addMultipleWidgetsByName('athlete-headshot');

        // Init slider
        this.initSlider();
        this.setListeners();

        // If small screen, scroll the overflow to the match to display
        const mql = window.matchMedia(`(max-width: ${app.measurements.tablet}px)`);
        if (mql.matches) {
          const eventToDisplay = _getEventToDisplay(this.slideContainer.children);
          eventToDisplay.classList.add(CONSTANTS.CLASSES.IS_DOCKED);
        }
      }
    }

    /**
     * Set Listeners
     * Sets listeners to the back and forward buttons of the slider
     */
    setListeners() {
      const morelessBtn = this.container.querySelector('.js-view-all');
      common.addAriaClickListener(morelessBtn, this.moreLessToggle.bind(this));
      core.event.windowResize.add({
        method: () => {
          if (window.innerWidth > app.measurements.tablet) {
            this.container.classList.remove(CONSTANTS.CLASSES.IS_OPEN);
            common.bodyScroll.enable();
          }
        }
      });
    }

    /**
     * Toggle
     *
     * Will enable or disable scrolling on mobile
     */
    moreLessToggle() {
      window.scrollTo({
        top: 0
      });
      this.container.classList.toggle(CONSTANTS.CLASSES.IS_OPEN);
      common.bodyScroll.toggle();
      if (this.container.classList.contains(CONSTANTS.CLASSES.IS_OPEN)) {
        const stripContainer = this.container.querySelector('.js-events-strip');
        stripContainer.scrollTo(0, 0);
        const eventToDisplay = _getEventToDisplay(this.slideContainer.children);
        const position = eventToDisplay.getBoundingClientRect();
        const scrollTop = (window.pageYOffset || document.documentElement.scrollTop) + position.top - MOBILE_HEADER_HEIGHT;
        stripContainer.scrollTo({
          top: scrollTop
        });
      }
    }

    /**
     * Model Event
     * Adds additional properties to data retreived from event endpoint
     * Categorised by Discipline
     *
     * @param {Object} eventData - event data returned from event endpoint
     * @param {String} name - event name used to filter out heat for WP
     * @return {Object} modelledEvent
     */
    modelEvent(_ref3, name) {
      let {
        Heats,
        ...eventData
      } = _ref3;
      const sportCode = Heats[0].SportCode;
      let heats = Heats.map(heat => {
        return {
          ...heat,
          Results: heat.Results[0]
        };
      });
      if (sportCode === 'WP') {
        // Water Polo events are treated differently to other disciplines
        heats = Heats.filter(heat => heat.Name === name).map(heat => {
          return {
            ...heat,
            Results: heat.Results[0]
          };
        });
      }
      return {
        ...eventData,
        sportCode,
        heats
      };
    }

    /**
     * Init Slider
     *
     * Do all the things to init the slider
     */
    initSlider() {
      const stripContainer = this.container.querySelector('.js-events-strip');
      this.slider = new common.ContentCarousel({
        container: stripContainer,
        slideContainer: this.slideContainer,
        sliderElements: this.container.querySelectorAll('.js-event'),
        nextButton: this.container.querySelector('.js-next-btn'),
        prevButton: this.container.querySelector('.js-prev-btn'),
        buttonHideClass: CONSTANTS.CLASSES.INACTIVE_CLASS,
        itemActiveClass: CONSTANTS.CLASSES.IS_ACTIVE
      });
      stripContainer.addEventListener(CONSTANTS.EVENTS.SLIDER.INITIALISED, this.onSliderActivation.bind(this));
    }

    /**
     * On Slider Activation
     *
     * Callback function for when the events slider activates. Looks for the
     * latest live event, get's it's slide index, then slides to it.
     */
    onSliderActivation() {
      const eventToDisplay = _getEventToDisplay(this.slideContainer.children);
      const targetSlideIndex = this.slider.getItemSlide(eventToDisplay);
      this.slider.slideTo(targetSlideIndex);
    }
  };

  /**
   * Get Event To Display
   *
   * Loop through a supplied list of elements, look for the first live event or
   * the first finished event, or the latest complete event, finally fallback
   * to the first event in the list
   *
   * @param {Array|HTMLCollection} events - A list of event elements
   * @returns {HTMLELement} The event to display
   */
  const _getEventToDisplay = events => {
    const sliderElements = [].slice.call(events);
    return sliderElements.find(event => event.dataset.status === 'LIVE' || event.dataset.status === 'UPCOMING') || sliderElements[sliderElements.length - 1];
  };
  app.widgetInitialiser.addMultipleWidgetsByName('global-results-strip', app.GlobalResultsStrip);
})(PULSE.app, PULSE.app.common, PULSE.core, PULSE.app.common.CONSTANTS, PULSE.I18N);